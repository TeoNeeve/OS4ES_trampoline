OIL_VERSION = "2.5" : "test" ;

CPU test {    
  	OS config {
    	STATUS = STANDARD;
    	BUILD = TRUE {
    		TRAMPOLINE_BASE_PATH = "../../..";
			APP_NAME = "ex1_arduino";
			APP_SRC = "ex1.c";
			APP_SRC = "tpl_os_hooks.c";
			CPPCOMPILER = "avr-g++";
    		COMPILER = "avr-gcc";
    		LINKER = "avr-gcc";
    		ASSEMBLER = "avr-gcc";
    		COPIER = "avr-objcopy";
    		SYSTEM = PYTHON;
    	};
    SYSTEM_CALL = TRUE;
  	};

	APPMODE stdAppmode {};

/*
  	RESOURCE Led {
	RESOURCEPROPERTY = STANDARD;
 	 };
*/
	ALARM AlarmBlink {
		COUNTER = SystemCounter;
		ACTION = ACTIVATETASK { TASK = Blink; };
		AUTOSTART = FALSE;
	};

	ALARM a500msec {
		COUNTER = SystemCounter;
		ACTION = ACTIVATETASK { TASK = TaskM; };
		AUTOSTART = TRUE { APPMODE = stdAppmode; ALARMTIME = 550; CYCLETIME = 500; };
	}; /* ho messo start a 50ms per avere un migliore task scheduling */

	ALARM a100msec {
		COUNTER = SystemCounter;
		ACTION = ACTIVATETASK { TASK = TaskC; };
		AUTOSTART = TRUE { APPMODE = stdAppmode; ALARMTIME = 50; CYCLETIME = 100; };
	};

	/* Message from TaskC to TaskM: TaskC sends an int, TaskM receives queued */
	MESSAGE MsgCtoM_send {
		MESSAGEPROPERTY = SEND_STATIC_INTERNAL {
			CDATATYPE = "int";
		};
	};

	MESSAGE MsgCtoM {
		MESSAGEPROPERTY = RECEIVE_QUEUED_INTERNAL {
			SENDINGMESSAGE = MsgCtoM_send;
			QUEUESIZE = 1;
		};
		/* NOTIFICATION = ACTIVATETASK { TASK = TaskM; }; questo non serve viene chiamato ogni 500ms*/
	};

	/* Message from TaskM to TaskV: TaskM sends an int, TaskV receives queued */
	MESSAGE MsgMtoV_send {
		MESSAGEPROPERTY = SEND_STATIC_INTERNAL {
			CDATATYPE = "int";
		};
	};

	MESSAGE MsgMtoV {
		MESSAGEPROPERTY = RECEIVE_QUEUED_INTERNAL {
			SENDINGMESSAGE = MsgMtoV_send;
			QUEUESIZE = 1;
		};
		NOTIFICATION = ACTIVATETASK { TASK = TaskV; };
	};

	TASK TaskM {
		PRIORITY = 3;
		AUTOSTART = TRUE { APPMODE = stdAppmode; };
		ACTIVATION = 1;
		SCHEDULE = FULL;
		MESSAGE = MsgCtoM; /* receive from TaskC */
		MESSAGE = MsgMtoV_send; /* can send to TaskV */
	};

	TASK TaskV {
		PRIORITY = 2;
		AUTOSTART = FALSE;
		ACTIVATION = 1;
		SCHEDULE = FULL;
		MESSAGE = MsgMtoV; /* receive from TaskM */
	};
	
	TASK TaskC {
		PRIORITY = 4;
		AUTOSTART = TRUE { APPMODE = stdAppmode; };
		ACTIVATION = 1;
		SCHEDULE = FULL;
		MESSAGE = MsgCtoM_send; /* send to TaskM */
	};

	TASK Blink {
		PRIORITY = 1;
		AUTOSTART = FALSE;
		ACTIVATION = 1;
		SCHEDULE = FULL;
		/*RESOURCE = Led;*/
	};

	TASK stop {
		PRIORITY = 99;
		AUTOSTART = FALSE;
		ACTIVATION = 1;
		SCHEDULE = FULL;
	};
};
